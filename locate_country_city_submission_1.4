{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "installed unidecode, matplotlib, \n",
    "Could not install geonamescache using conda install geonamescache\n",
    "used pip install geonamescache\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['First', 'Case', 'Zika', 'Miami', 'Beach']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "test = re.findall(r\"([A-Z]\\w+)\\s?\", \"First Case of Zika in Miami Beach\")\n",
    "print(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                  headline countries         cities\n",
      "0                 Zika Outbreak Hits Miami       NaN          Miami\n",
      "1          Could Zika Reach New York City?       NaN  New York City\n",
      "2        First Case of Zika in Miami Beach       NaN          Miami\n",
      "3  Mystery Virus Spreads in Recife, Brazil    Brazil         Recife\n",
      "4  Dallas man comes down with case of Zika       NaN         Dallas\n",
      "                                              headline countries       cities\n",
      "645  Rumors about Rabies spreading in Jerusalem hav...       NaN    Jerusalem\n",
      "646              More Zika patients reported in Indang       NaN       Indang\n",
      "647  Suva authorities confirmed the spread of Rotav...       NaN         Suva\n",
      "648         More Zika patients reported in Bella Vista       NaN  Bella Vista\n",
      "649                     Zika Outbreak in Wichita Falls       NaN      Wichita\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "from unidecode import unidecode\n",
    "import geonamescache\n",
    "import pandas as pd\n",
    "\n",
    "#-------------------------------------------------------\n",
    "# NOTE:: Got rid of proposition in the headline by splitting\n",
    "#        upper case words. \n",
    "#         Do not know how to match Miami vs Miami Beach\n",
    "#---------------------------------------------------------\n",
    "gc = geonamescache.GeonamesCache()\n",
    "# build city list\n",
    "cities = []\n",
    "for key, value in gc.get_cities().items():\n",
    "    #print(key, value[\"name\"])\n",
    "    cities.append(value[\"name\"])\n",
    "    \n",
    "cities = \"|\".join(cities)\n",
    "#raw string for pattern\n",
    "cities = r\"\\b(\"+unidecode(cities)+r\")\\b\"\n",
    "regexp_cities = re.compile(cities,flags=re.IGNORECASE)\n",
    "# build country list\n",
    "countries = \"|\".join(gc.get_countries_by_names().keys())\n",
    "countries = r\"\\b(\"+countries+r\")\\b\"\n",
    "regexp = re.compile(countries,flags=re.IGNORECASE)\n",
    "# storage for build header line, country and city\n",
    "\n",
    "hd_line = []\n",
    "hd_country = []\n",
    "hd_city =[]\n",
    "\n",
    "# go through data file - one line at a time\n",
    "# drop eol, cleanup header lines with unidecode\n",
    "# if city/country is missing in the header line mark with \"NaN\"\n",
    "#\n",
    "file = open(\"data\\headlines.txt\", 'r')\n",
    "for line in file.readlines():\n",
    "    ucode_line = unidecode(line.rstrip())\n",
    "    m = regexp.search(ucode_line)\n",
    "    hd_line.append(ucode_line)\n",
    "#check country\n",
    "    if m is not None:\n",
    "        hd_country.append(m.group(0))\n",
    "        #print(ucode_line,m)\n",
    "    else:\n",
    "        hd_country.append(\"NaN\")\n",
    "# check city\n",
    "# skip of, in etc. Start with uppercase\n",
    "    skip_prop = re.findall(r\"([A-Z]\\w+)\\s?\", ucode_line)\n",
    "    skip_prop = \" \".join(skip_prop)\n",
    "    #print(skip_prop)\n",
    "    m = regexp_cities.search(skip_prop)\n",
    "    \n",
    "    if m is not None:\n",
    "        hd_city.append(m.group(0))\n",
    "        #print(ucode_line,m)\n",
    "    else:\n",
    "        hd_city.append(\"NaN\")\n",
    "        #print(ucode_line)\n",
    "    \n",
    "file.close()\n",
    "# build pandas data frame\n",
    "df = pd.DataFrame({'headline': hd_line, 'countries':hd_country, 'cities': hd_city})\n",
    "print(df.head(5))\n",
    "print(df.tail(5))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
